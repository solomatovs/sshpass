// use nix::errno::Errno::EAGAIN;
// use nix::pty::{openpty, OpenptyResult};
// use nix::sys::signal::{kill, SigSet, Signal};
// use nix::sys::signalfd::{SfdFlags, SignalFd};
// use nix::sys::wait::{waitpid, WaitStatus};
// use nix::unistd::Pid;
// use nix::unistd::{fork, ForkResult};
// use nix::{
//     libc,
//     poll::{PollFlags, PollTimeout},
//     unistd::read,
// };
// use std::boxed::Box;
// use std::ffi::OsStr;
// use std::os::fd::OwnedFd;
// use std::os::unix::io::{AsRawFd, FromRawFd};
// use std::os::unix::process::CommandExt;
// use std::process::Stdio;
// use std::thread::sleep;
// use std::time::Duration;

// use termios::{
//     tcsetattr, Termios, BRKINT, CS8, CSIZE, ECHO, ECHONL, ICANON, ICRNL, IEXTEN, IGNBRK, IGNCR,
//     INLCR, ISIG, ISTRIP, IXON, OPOST, PARENB, PARMRK, TCSANOW, VMIN, VTIME,
// };

// use log::{debug, error, trace};

// use crate::unix::unix_error::UnixError;


// #[derive(Debug)]
// pub struct Fds {
//     pub(crate) pollfds: Vec<libc::pollfd>,
//     // pub(crate) fds: Vec<FileType>,
// }

// impl Fds {
//     pub fn new() -> Self {
//         let res = Self {
//             pollfds: vec![],
//             // fds: vec![],
//         };

//         res
//     }

//     // pub fn get_fd_type(pollfd: &libc::pollfd) -> Result<FileType, nix::errno::Errno> {
//     //     let stat = fstat(pollfd.fd)?;
//     //     let mode = stat.st_mode;

//     //     if mode & SFlag::S_IFREG.bits() != 0 {
//     //         Ok(FileType::RegularFile)
//     //     } else if mode & SFlag::S_IFSOCK.bits() != 0 {
//     //         Ok(FileType::Socket)
//     //     } else if mode & SFlag::S_IFIFO.bits() != 0 {
//     //         Ok(FileType::Pipe)
//     //     } else if mode & SFlag::S_IFCHR.bits() != 0 {
//     //         Ok(FileType::CharDevice)
//     //     } else {
//     //         Ok(FileType::Other)
//     //     }
//     // }

//     fn get_pollfd_by_raw_id<'a>(
//         pollfds: &'a mut [libc::pollfd],
//         raw_fd: i32,
//     ) -> Option<&'a mut libc::pollfd> {
//         // let res = pollfds.deref_mut();
//         let res = pollfds.iter_mut().find(|x| x.fd == raw_fd);

//         res
//     }

//     /// Добавляет дескриптор pty (master и slave дестрикторы) в список файловых дскрипторов
//     fn push_pty_fd(&mut self, pty_fd: OpenptyResult, child: Pid, events: PollFlags) {
//         self.pollfds.push(libc::pollfd {
//             fd: pty_fd.master.as_raw_fd(),
//             events: events.bits(),
//             revents: 0,
//         });

//         let res = FileType::Pty {
//             master: pty_fd.master,
//             slave: pty_fd.slave,
//             child,
//             events
//         };
//         self.fds.push(res);
//     }

//     /// Добавляет дескриптор сигнала в список файловых дескрипторов
//     fn push_signal_fd(&mut self, signal_fd: SignalFd, events: PollFlags) {
//         self.pollfds.push(libc::pollfd {
//             fd: signal_fd.as_raw_fd(),
//             events: events.bits(),
//             revents: 0,
//         });

//         let res = FileType::SignalFd {
//             fd: signal_fd,
//             events
//         };
//         self.fds.push(res);
//     }

//     /// Добавляет дескриптор stdout/stderr в список файловых дескрипторов
//     fn push_stdout_fd(&mut self, events: PollFlags) {
//         self.pollfds.push(libc::pollfd {
//             fd: 1,
//             events: events.bits(),
//             revents: 0,
//         });


//         let res = FileType::Stdout {
//             fd: std::io::stdout(),
//             events,
//         };
//         self.fds.push(res);
//     }

//     fn push_stderr_fd(&mut self, events: PollFlags) {
//         self.pollfds.push(libc::pollfd {
//             fd: 2,
//             events: events.bits(),
//             revents: 0,
//         });

//         let res = FileType::Stderr {
//             fd: std::io::stderr(),
//             events,
//         };
//         self.fds.push(res);
//     }

//     /// Добавляет дескриптор stdin в список файловых дескрипторов
//     fn push_stdin_fd(&mut self, termios: Termios, events: PollFlags) {
//         self.pollfds.push(libc::pollfd {
//             fd: 0,
//             events: events.bits(),
//             revents: 0,
//         });

//         let res = FileType::Stdin {
//             fd: std::io::stdin(),
//             termios,
//             events,
//         };
//         self.fds.push(res);
//     }

//     pub fn as_pollfds(&mut self) -> &mut [libc::pollfd] {
//         &mut self.pollfds
//     }

//     pub fn pollfd_len(&self) -> usize {
//         self.pollfds.len()
//     }

//     fn termios_from_bytes(bytes: Vec<u8>) -> Option<Termios> {
//         if bytes.len() != std::mem::size_of::<Termios>() {
//             return None;
//         }

//         Some(unsafe { std::mem::transmute_copy(&bytes[0]) })
//     }

//     pub fn reg_pty_child<S, I>(&mut self, program: S, args: Option<I>) -> Result<(), UnixError>
//     where
//         I: IntoIterator<Item = S>,
//         S: AsRef<OsStr>,
//     {
//         // Создаем псевдотерминал (PTY)
//         let pty = openpty(None, None).expect("Failed to open PTY");

//         // fork() - создает дочерний процесс из текущего
//         // parent блок это продолжение текущего запущенного процесса
//         // child блок это то, что выполняется в дочернем процессе
//         // все окружение дочернего процесса наследуется из родительского
//         let status = match unsafe { fork() } {
//             Ok(ForkResult::Child) => {
//                 let master = match pty.master.try_clone() {
//                     Err(e) => {
//                         error!("Failed to clone PTY master: {}", e);
//                         return Err(e.into());
//                     }
//                     Ok(master) => master,
//                 };

//                 // Перенаправляем стандартный ввод, вывод и ошибки в псевдотерминал
//                 unsafe { nix::libc::ioctl(master.as_raw_fd(), nix::libc::TIOCNOTTY) };
//                 unsafe { nix::libc::setsid() };
//                 unsafe { nix::libc::ioctl(pty.slave.as_raw_fd(), nix::libc::TIOCSCTTY) };
//                 // эта программа исполняется только в дочернем процессе
//                 // родительский процесс в это же время выполняется и что то делает

//                 // lambda функция для перенаправления stdio
//                 let new_follower_stdio = || unsafe { Stdio::from_raw_fd(pty.slave.as_raw_fd()) };

//                 // ДАЛЬНЕЙШИЙ ЗАПУСК БЕЗ FORK ПРОЦЕССА
//                 // это означает что дочерний процесс не будет еще раз разделятся
//                 // Command будет выполняться под pid этого дочернего процесса и буквально станет им
//                 // осуществляется всё это с помощью exec()
//                 let mut cmd = std::process::Command::new(program);
//                 if let Some(args) = args {
//                     cmd.args(args);
//                 }

//                 let e = cmd
//                     .stdin(new_follower_stdio())
//                     .stdout(new_follower_stdio())
//                     .stderr(new_follower_stdio())
//                     .exec();

//                 error!("child error: {e}");

//                 Err(e.into())
//             }
//             Ok(ForkResult::Parent { child }) => {
//                 // эта исполняется только в родительском процессе
//                 // возвращаю pty дескриптор для отслеживания событий через poll
//                 self.push_pty_fd(pty, child, PollFlags::POLLIN);

//                 Ok(())
//             }
//             Err(e) => {
//                 error!(
//                     "{:?}: {:?}: Fork failed: {}",
//                     std::thread::current().id(),
//                     std::time::SystemTime::now(),
//                     e
//                 );
//                 Err(e.into())
//             }
//         };

//         status
//     }

//     // Флаг          Значение
//     // ISIG          Разрешить посылку сигналов
//     // ICANON        Канонический ввод (обработка забоя и стирания строки)
//     // XCASE         Каноническое представление верхнего/нижнего регистров
//     // ECHO          Разрешить эхо
//     // ECHOE         Эхо на символ забоя - BS-SP-BS
//     // ECHOK         Выдавать NL после символа стирания строки
//     // ECHONL        Выдавать эхо на NL
//     // NOFLSH        Запретить сброс буферов после сигналов прерывания и
//     //               завершения
//     // TOSTOP        Посылать SIGTTOU фоновым процессам, которые пытаются
//     //               выводить на терминал
//     // ECHOCTL       Выдавать эхо на CTRL-символы как .r, ASCII DEL как
//     //               ?
//     // ECHOPRT       Эхо на символ забоя как стертый символ
//     // ECHOKE        При стирании строки, очищать ранее введенную строку
//     //               символами BS-SP-BS
//     // FLUSHO        Сбрасывание буфера вывода (состояние)
//     // PENDIN        Повторять несчитанный ввод при следующем чтении или
//     //               введенном символе
//     // IEXTEN        Разрешить расширенные (определенные реализацией)
//     //               функции
//     fn set_keypress_mode(termios: &mut Termios) {
//         termios.c_iflag &= !(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL | IXON);
//         termios.c_oflag &= !OPOST;
//         termios.c_lflag &= !(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
//         termios.c_cflag &= !(CSIZE | PARENB);
//         termios.c_cflag |= CS8;
//         termios.c_cc[VMIN] = 0;
//         termios.c_cc[VTIME] = 0;
//     }

//     fn set_termios(stdin_fild: i32, termios: &Termios) -> std::io::Result<()> {
//         tcsetattr(stdin_fild, TCSANOW, termios)?;
//         Ok(())
//     }

//     fn get_termios(stdin_fild: i32) -> std::io::Result<Termios> {
//         Termios::from_fd(stdin_fild)
//     }

//     fn _get_termsize(stdin_fild: i32) -> std::io::Result<Box<nix::libc::winsize>> {
//         let mut size = Box::new(nix::libc::winsize {
//             ws_row: 25,
//             ws_col: 80,
//             ws_xpixel: 0,
//             ws_ypixel: 0,
//         });
//         let ret = unsafe { nix::libc::ioctl(stdin_fild, nix::libc::TIOCGWINSZ, &mut *size) };

//         match ret {
//             0 => Ok(size),
//             _ => Err(std::io::Error::last_os_error()),
//         }
//     }

//     pub fn _set_termsize(fd: i32, mut size: nix::libc::winsize) -> std::io::Result<()> {
//         let ret = unsafe { nix::libc::ioctl(fd, nix::libc::TIOCSWINSZ, &mut size) };

//         match ret {
//             0 => Ok(()),
//             _ => Err(std::io::Error::last_os_error()),
//         }
//     }

//     pub fn reg_stdin_non_canonical_mode(&mut self) -> Result<(), UnixError> {
//         // перевожу stdin в режим non canonical для побайтовой обработки вводимых данных
//         // добавляю в контейнер fds для дальнейшего отслеживания событий через poll
//         let stdin_fileno = 0;

//         let termios = Self::get_termios(stdin_fileno)?;
//         let mut termios_modify = Self::get_termios(stdin_fileno)?;
//         Self::set_keypress_mode(&mut termios_modify);
//         Self::set_termios(stdin_fileno, &termios_modify)?;

//         self.push_stdin_fd(termios, PollFlags::POLLIN);

//         Ok(())
//     }

//     pub fn reg_signals(&mut self) -> Result<(), UnixError> {
//         let mut mask = SigSet::empty();
//         // добавляю в обработчик все сигналы
//         for signal in Signal::iterator() {
//             mask.add(signal);
//         }

//         let mut new_mask = SigSet::thread_get_mask()?;
//         for s in mask.into_iter() {
//             new_mask.add(s);
//         }

//         new_mask.thread_block()?;

//         let signal_fd =
//             SignalFd::with_flags(&new_mask, SfdFlags::SFD_NONBLOCK | SfdFlags::SFD_CLOEXEC)?;

//         self.push_signal_fd(signal_fd, PollFlags::POLLIN);

//         Ok(())
//     }

//     pub fn reg_stdout(&mut self) -> Result<(), UnixError> {
//         self.push_stdout_fd(PollFlags::POLLIN);
//         Ok(())
//     }

//     pub fn reg_stderr(&mut self) -> Result<(), UnixError> {
//         self.push_stderr_fd(PollFlags::POLLIN);
//         Ok(())
//     }

//     /// Функция читает системное событие
//     /// Если poll сигнализирует что событие есть, то нужно вызвать эту функцию
//     /// Что бы прочитать событие, иначе при следующем вызове poll
//     /// он опять сигнализирует о том, что событие есть и оно не прочитано
//     pub fn read_event(
//         pollfd: &mut libc::pollfd,
//         buf: &mut [u8],
//     ) -> Result<usize, nix::errno::Errno> {
//         trace!("fd reading ({:?})", pollfd);

//         let res = read(pollfd.fd, buf);

//         match res {
//             Err(EAGAIN) => {
//                 // non block
//                 trace!(
//                     "non-blocking reading mode is enabled (SFD_NONBLOCK). fd {:?} doesn't data",
//                     pollfd
//                 );
//                 Ok(0)
//             }
//             Err(e) => {
//                 // error
//                 error!("read = Err({})", e);
//                 Err(e)
//             }
//             Ok(0) => {
//                 // EOF
//                 trace!("read = Ok(0) bytes (EOF)");
//                 Ok(0)
//             }
//             Ok(n) => {
//                 // read n bytes
//                 trace!("read = Ok({n}) bytes");
//                 Ok(n)
//             }
//         }
//     }

//     fn is_process_alive(pid: &Pid) -> bool {
//         match waitpid(*pid, Some(nix::sys::wait::WaitPidFlag::WNOHANG)) {
//             Ok(WaitStatus::StillAlive) | Err(_) => true,
//             _ => false,
//         }
//     }

//     fn send_signal(pid: Pid, signal: Signal) -> Result<(), nix::errno::Errno> {
//         kill(pid, signal)?;
//         Ok(())
//     }

//     fn pid_terminate(pid: Pid) -> Result<(), nix::errno::Errno> {
//         kill(pid, Signal::SIGTERM)?;

//         // Ждем до 10 секунд, проверяя, завершился ли процесс
//         for _ in 0..10 {
//             sleep(Duration::from_secs(1));
//             if !Self::is_process_alive(&pid) {
//                 println!("Process {} exited gracefully.", pid);
//                 return Ok(());
//             }
//         }

//         kill(pid, Signal::SIGKILL)?;

//         Ok(())
//     }
// }

// impl Drop for Fds {
//     fn drop(&mut self) {
//         while let Some(fd) = self.fds.pop() {
//             // если дескриптор stdin, то восстанавливаю termios
//             match fd {
//                 FileType::Stdin { fd: _, termios, events: _ } => {
//                     trace!("termios restore: {:#?}", termios);
//                     let res = Self::set_termios(0, &termios);
//                     trace!("termios restore: {:?}", res);

//                     debug!("close stdin");
//                 }
//                 FileType::Stdout { fd: _, events: _ } => {
//                     debug!("close stdout");
//                 }
//                 FileType::Stderr { fd: _, events: _ } => {
//                     debug!("close stderr");
//                 }
//                 FileType::Pty { master, slave, child, events: _ } => {
//                     debug!("pty close...");
//                     debug!("close master {:#?} = {}", master.as_raw_fd(), unsafe {
//                         libc::close(master.as_raw_fd())
//                     });
//                     debug!("close slave {:#?} = {}", slave.as_raw_fd(), unsafe {
//                         libc::close(slave.as_raw_fd())
//                     });

//                     // завершает процесс по pid
//                     if let Err(e) = Self::pid_terminate(child) {
//                         error!("pid_terminate = Err({})", e);
//                     }
//                 }
//                 FileType::SignalFd { fd, events: _ } => {
//                     debug!("close signalfd {:#?} = {}", fd.as_raw_fd(), unsafe {
//                         libc::close(fd.as_raw_fd())
//                     });
//                 }
//             }
//         }
//     }}

// #[derive(Debug)]
// pub struct Poller {
//     poll_timeout: PollTimeout,
// }

// impl Poller {
//     pub fn new(poll_timeout: PollTimeout) -> Self {
//         Self { poll_timeout }
//     }

//     pub fn poll(&mut self, fds: &mut Fds) -> nix::Result<libc::c_int> {
//         trace!("poll(&mut fds, {:?})", self.poll_timeout);
//         let len = fds.pollfd_len();
//         let res = unsafe {
//             libc::poll(
//                 fds.as_pollfds().as_mut_ptr(),
//                 len as libc::nfds_t,
//                 i32::from(self.poll_timeout),
//             )
//         };

//         nix::errno::Errno::result(res)
//     }

//     pub fn revent<'fd>(&mut self, fds: &'fd mut Fds) -> Option<&'fd mut FileType> {
//         // Находим индекс следующего элемента с revents != 0
//         let found_index = (0..fds.pollfd_len()).find(|&i| fds.pollfds[i].revents != 0);

//         if let Some(index) = found_index {
//             let pollfd = &mut fds.pollfds[index];
//             pollfd.revents = 0;
//             let fd = &mut fds.fds[index];
//             Some(fd)
//         } else {
//             None
//         }
//     }
// }
